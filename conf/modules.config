/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
    ]

    withName: MULTIQC {
        ext.args   = { params.multiqc_title ? "--title \"${params.multiqc_title}\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: GUNZIP {
        publishDir = [
            enabled: false
        ]
    }

    withName: MMSEQS_DATABASES {
        publishDir = [
            path: { "${params.outdir}/databases/mmseqs/" },
            mode: params.publish_dir_mode,
            enabled: params.save_db,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            params.taxa_classification_mmseqs_db_savetmp ? "" : "--remove-tmp-files",
            "--compressed ${params.taxa_classification_mmseqs_compressed ? '1' : '0'}",
        ].join(' ').trim()
    }

    withName: MMSEQS_CREATEDB {
        publishDir = [
            path: { "${params.outdir}/databases/mmseqs/mmseqs_createdb/" },
            mode: params.publish_dir_mode,
            enabled: params.save_db,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            "--compressed ${params.taxa_classification_mmseqs_compressed ? '1' : '0'}"
        ].join(' ').trim()
    }

    withName: MMSEQS_TAXONOMY {
        publishDir = [
            path: { "${params.outdir}/databases/mmseqs/mmseqs_taxonomy/" },
            mode: params.publish_dir_mode,
            enabled: params.save_db,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            params.taxa_classification_mmseqs_taxonomy_savetmp ? "" : "--remove-tmp-files",
            "--search-type ${params.taxa_classification_mmseqs_taxonomy_searchtype}",
            "--lca-ranks ${params.taxa_classification_mmseqs_taxonomy_lcaranks}",
            "--tax-lineage ${params.taxa_classification_mmseqs_taxonomy_taxlineage}",
            "-s ${params.taxa_classification_mmseqs_taxonomy_sensitivity}",
            "--orf-filter-s ${params.taxa_classification_mmseqs_taxonomy_orffilters}",
            "--lca-mode ${params.taxa_classification_mmseqs_taxonomy_lcamode}",
            "--vote-mode ${params.taxa_classification_mmseqs_taxonomy_votemode}",
            "--compressed ${params.taxa_classification_mmseqs_compressed ? '1' : '0'}",
        ].join(' ').trim()
    }

    withName: MMSEQS_CREATETSV {
        publishDir = [
            path: { "${params.outdir}/taxa_classification/mmseqs_createtsv/${meta.id}/" },
            mode: params.publish_dir_mode,
            enabled: params.run_taxa_classification,
            pattern: "*.tsv",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            "--compressed ${params.taxa_classification_mmseqs_compressed ? '1' : '0'}"
        ].join(' ').trim()
    }

    withName: SEQKIT_SEQ_LENGTH {
        ext.prefix = { "${meta.id}_long" }
        publishDir = [
            path: { "${params.outdir}/bgc/seqkit/" },
            mode: params.publish_dir_mode,
            enabled: params.bgc_savefilteredcontigs,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            "--min-len ${params.bgc_mincontiglength}"
        ].join(' ').trim()
    }

    withName: SEQKIT_SEQ_FILTER {
        ext.prefix = { "${meta.id}_cleaned.faa" }
        publishDir = [
            path: { "${params.outdir}/protein_annotation/interproscan/" },
            mode: params.publish_dir_mode,
            enabled: { params.run_protein_annotation },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            "--gap-letters '* \t.' --remove-gaps"
        ].join(' ').trim()
    }

    withName: INTERPROSCAN_DATABASE {
        publishDir = [
            path: { "${params.outdir}/databases/interproscan/" },
            mode: params.publish_dir_mode,
            enabled: params.save_db,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: INTERPROSCAN {
        ext.prefix = { "${meta.id}_interproscan.faa" }
        publishDir = [
            path: { "${params.outdir}/protein_annotation/interproscan/" },
            mode: params.publish_dir_mode,
            enabled: params.run_protein_annotation,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            "--applications ${params.protein_annotation_interproscan_applications}",
            params.protein_annotation_interproscan_enableprecalc ? '' : '--disable-precalc',
            '--disable-residue-annot',
            '--enable-tsv-residue-annot',
            "--formats tsv",
        ].join(' ').trim()
    }

    withName: PROKKA {
        ext.prefix = { "${meta.id}_prokka" }
        publishDir = [
            path: { "${params.outdir}/annotation/prokka/${meta.category}/" },
            mode: params.publish_dir_mode,
            enabled: params.save_annotations,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            "--kingdom ${params.annotation_prokka_kingdom}",
            "--gcode ${params.annotation_prokka_gcode}",
            "--mincontiglen ${params.annotation_prokka_mincontiglen}",
            "--evalue ${params.annotation_prokka_evalue}",
            "--coverage ${params.annotation_prokka_coverage}",
            params.annotation_prokka_retaincontigheaders ? "--force" : "--locustag PROKKA --centre CENTER",
            params.annotation_prokka_singlemode ? '' : '--metagenome',
            params.annotation_prokka_cdsrnaolap ? '--cdsrnaolap' : '',
            params.annotation_prokka_rawproduct ? '--rawproduct' : '',
            params.annotation_prokka_rnammer ? '--rnammer' : '',
            params.annotation_prokka_compliant ? '--compliant' : '',
            params.annotation_prokka_addgenes ? '--addgenes' : '',
        ].join(' ').trim()
    }

    withName: BAKTA_BAKTADBDOWNLOAD {
        publishDir = [
            path: { "${params.outdir}/databases/bakta" },
            mode: params.publish_dir_mode,
            enabled: params.save_db,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            "--type ${params.annotation_bakta_db_downloadtype}"
        ].join(' ').trim()
    }

    withName: BAKTA_BAKTA {
        ext.prefix = { "${meta.id}_bakta" }
        publishDir = [
            path: { "${params.outdir}/annotation/bakta/${meta.category}/" },
            mode: params.publish_dir_mode,
            enabled: params.save_annotations,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            params.annotation_bakta_singlemode ? '' : '--meta',
            "--min-contig-length ${params.annotation_bakta_mincontiglen}",
            "--translation-table ${params.annotation_bakta_translationtable}",
            "--gram ${params.annotation_bakta_gram}",
            params.annotation_bakta_complete ? '--complete' : '',
            params.annotation_bakta_renamecontigheaders ? '' : '--keep-contig-headers',
            params.annotation_bakta_compliant ? '--compliant' : '',
            params.annotation_bakta_trna ? '' : '--skip-trna',
            params.annotation_bakta_tmrna ? '' : '--skip-tmrna',
            params.annotation_bakta_rrna ? '' : '--skip-rrna',
            params.annotation_bakta_ncrna ? '' : '--skip-ncrna',
            params.annotation_bakta_ncrnaregion ? '' : '--skip-ncrna-region',
            params.annotation_bakta_crispr ? '' : '--skip-crispr',
            params.annotation_bakta_skipcds ? '--skip-cds' : '',
            params.annotation_bakta_pseudo ? '' : '--skip-pseudo',
            params.annotation_bakta_skipsorf ? '--skip-sorf' : '',
            params.annotation_bakta_gap ? '' : '--skip-gap',
            params.annotation_bakta_ori ? '' : '--skip-ori',
            params.annotation_bakta_activate_plot ? '' : '--skip-plot',
            params.annotation_bakta_hmms ? '--hmms ${params.annotation_bakta_hmms}' : '',
        ].join(' ').trim()
    }

    withName: PRODIGAL {
        publishDir = [
            path: { "${params.outdir}/annotation/prodigal/${meta.category}/" },
            mode: params.publish_dir_mode,
            enabled: params.save_annotations,
            pattern: "*.{faa,fna,gbk,faa.gz,faa.gz,fna.gz,gbk.gz}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            params.annotation_prodigal_singlemode ? "-p single" : "-p meta",
            params.annotation_prodigal_closed ? "-c" : "",
            params.annotation_prodigal_forcenonsd ? "-n" : "",
            "-g ${params.annotation_prodigal_transtable}",
        ].join(' ').trim()
    }

    withName: PYRODIGAL {
        ext.prefix = { "${meta.id}_pyrodigal" }
        publishDir = [
            path: { "${params.outdir}/annotation/pyrodigal/${meta.category}/" },
            mode: params.publish_dir_mode,
            enabled: params.save_annotations,
            pattern: "*.{faa,fna,gbk,score}.gz",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            params.annotation_pyrodigal_singlemode ? "-p single" : "-p meta",
            params.annotation_pyrodigal_closed ? "-c" : "",
            params.annotation_pyrodigal_forcenonsd ? "-n" : "",
            params.annotation_pyrodigal_usespecialstopcharacter ? '' : '--no-stop-codon',
            "-g ${params.annotation_pyrodigal_transtable}",
        ].join(' ').trim()
    }

    withName: ABRICATE_RUN {
        publishDir = [
            path: { "${params.outdir}/arg/abricate/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            "--db ${params.arg_abricate_db_id}",
            "--minid ${params.arg_abricate_minid}",
            "--mincov ${params.arg_abricate_mincov}",
        ].join(' ').trim()
    }

    withName: AMRFINDERPLUS_UPDATE {
        publishDir = [
            path: { "${params.outdir}/databases/amrfinderplus" },
            mode: params.publish_dir_mode,
            enabled: params.save_db,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: AMRFINDERPLUS_RUN {
        publishDir = [
            path: { "${params.outdir}/arg/amrfinderplus/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = {
            [
                "--ident_min ${params.arg_amrfinderplus_identmin}",
                "--coverage_min ${params.arg_amrfinderplus_coveragemin}",
                "--translation_table ${params.arg_amrfinderplus_translationtable}",
                params.arg_amrfinderplus_plus ? '--plus' : '',
                params.arg_amrfinderplus_name ? "--name ${meta.id}" : '',
            ].join(' ').trim()
        }
    }

    withName: DEEPARG_DOWNLOADDATA {
        publishDir = [
            path: { "${params.outdir}/databases/deeparg" },
            mode: params.publish_dir_mode,
            enabled: params.save_db,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: DEEPARG_PREDICT {
        publishDir = [
            path: { "${params.outdir}/arg/deeparg/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            "--type prot",
            "--min-prob ${params.arg_deeparg_minprob}",
            "--arg-alignment-identity ${params.arg_deeparg_alignmentidentity}",
            "--arg-alignment-evalue ${params.arg_deeparg_alignmentevalue}",
            "--arg-alignment-overlap ${params.arg_deeparg_alignmentoverlap}",
            "--arg-num-alignments-per-entry ${params.arg_deeparg_numalignmentsperentry}",
        ].join(' ').trim()
    }

    withName: FARGENE {
        tag        = { "${meta.id}|${hmm_model}" }
        publishDir = [
            [
                path: { "${params.outdir}/arg/fargene/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.log",
            ],
            [
                path: { "${params.outdir}/arg/fargene/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*/results_summary.txt",
            ],
            [
                path: { "${params.outdir}/arg/fargene/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*/{hmmsearchresults,predictedGenes,retrievedFragments}/*",
            ],
            [
                path: { "${params.outdir}/arg/fargene/${meta.id}/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*/{tmpdir}/*",
                enabled: params.arg_fargene_savetmpfiles,
            ],
        ]
        ext.prefix = { "${meta.hmm_class}" }
        ext.args   = {
            [
                "--hmm-model ${params.arg_fargene_hmmmodel}",
                "--logfile ${meta.id}-${meta.hmm_class}.log",
                "--min-orf-length ${params.arg_fargene_minorflength}",
                "--score ${params.arg_fargene_score}",
                "--translation-format ${params.arg_fargene_translationformat}",
                params.arg_fargene_orffinder ? ' --orf-finder' : '',
            ].join(' ').trim()
        }
    }

    withName: UNTAR_CARD {
        ext.prefix = "card_database"
        publishDir = [
            [
                path: { "${params.outdir}/databases/rgi" },
                mode: params.publish_dir_mode,
                enabled: params.save_db,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        ]
    }

    withName: RGI_CARDANNOTATION {
        publishDir = [
            [
                path: { "${params.outdir}/databases/rgi" },
                mode: params.publish_dir_mode,
                enabled: params.save_db,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        ]
    }

    withName: RGI_MAIN {
        publishDir = [
            [
                path: { "${params.outdir}/arg/rgi/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.{txt}",
            ],
            [
                path: { "${params.outdir}/arg/rgi/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.{json}",
                enabled: params.arg_rgi_savejson,
            ],
            [
                path: { "${params.outdir}/arg/rgi/${meta.id}/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*temp*",
                enabled: params.arg_rgi_savetmpfiles,
            ],
        ]
        ext.args2  = [
            "--alignment_tool ${params.arg_rgi_alignmenttool}",
            "--data ${params.arg_rgi_data}",
            params.arg_rgi_includeloose ? '--include_loose' : '',
            params.arg_rgi_includenudge ? '--include_nudge' : '',
            params.arg_rgi_lowquality ? '--low_quality' : '',
            params.arg_rgi_split_prodigal_jobs ? '--split_prodigal_jobs' : '',
        ].join(' ').trim()
    }

    withName: AMPIR {
        ext.prefix = { "${meta.id}.ampir" }
        publishDir = [
            path: { "${params.outdir}/amp/ampir/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: AMPLIFY_PREDICT {
        ext.prefix = { "${meta.id}.amplify" }
        publishDir = [
            path: { "${params.outdir}/amp/amplify/${meta.id}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: AMP_HMMER_HMMSEARCH {
        label      = { "${meta.id}_${meta.hmm_id}" }
        publishDir = [
            path: { "${params.outdir}/amp/hmmer_hmmsearch/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.prefix = { "${meta.id}_${meta.hmm_id}.hmmer_hmmsearch" }
    }

    withName: MACREL_CONTIGS {
        ext.prefix = { "${meta.id}.macrel" }
        publishDir = [
            path: { "${params.outdir}/amp/macrel" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = "--keep-negatives"
    }

    withName: BGC_HMMER_HMMSEARCH {
        label      = { "${meta.id}_${meta.hmm_id}" }
        publishDir = [
            path: { "${params.outdir}/bgc/hmmer_hmmsearch/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.prefix = { "${meta.id}_${meta.hmm_id}" }
    }

    withName: ANTISMASH_ANTISMASH {
        publishDir = [
            path: { "${params.outdir}/bgc/antismash" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            params.bgc_antismash_cbgeneral ? '--cb-general' : '',
            params.bgc_antismash_cbknownclusters ? '--cb-knownclusters' : '',
            params.bgc_antismash_smcogtrees ? '--smcog-trees' : '',
            params.bgc_antismash_ccmibig ? '--cc-mibig' : '',
            params.bgc_antismash_cbsubclusters ? '--cb-subclusters' : '',
            params.bgc_antismash_pfam2go ? '--pfam2go' : '',
            params.bgc_antismash_rre ? '--rre' : '',
            params.bgc_antismash_tfbs ? '--tfbs' : '',
            "--allow-long-headers",
            "--minlength ${params.bgc_antismash_contigminlength}",
            "--hmmdetection-strictness ${params.bgc_antismash_hmmdetectionstrictness}",
            "--taxon ${params.bgc_antismash_taxon}",
        ].join(' ').trim()
    }

    withName: ANTISMASH_ANTISMASHDOWNLOADDATABASES {
        publishDir = [
            path: { "${params.outdir}/databases/antismash" },
            mode: params.publish_dir_mode,
            enabled: params.save_db,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: DEEPBGC_DOWNLOAD {
        publishDir = [
            path: { "${params.outdir}/databases/deepbgc" },
            mode: params.publish_dir_mode,
            enabled: params.save_db,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: DEEPBGC_PIPELINE {
        publishDir = [
            path: { "${params.outdir}/bgc/deepbgc/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            "--score ${params.bgc_deepbgc_score}",
            params.bgc_deepbgc_prodigalsinglemode ? '' : '--prodigal-meta-mode',
            "--merge-max-protein-gap ${params.bgc_deepbgc_mergemaxproteingap}",
            "--merge-max-nucl-gap ${params.bgc_deepbgc_mergemaxnuclgap}",
            "--min-nucl ${params.bgc_deepbgc_minnucl}",
            "--min-proteins ${params.bgc_deepbgc_minproteins}",
            "--min-domains ${params.bgc_deepbgc_mindomains}",
            "--min-bio-domains ${params.bgc_deepbgc_minbiodomains}",
            "--classifier-score ${params.bgc_deepbgc_classifierscore}",
        ].join(' ').trim()
    }

    withName: GECCO_RUN {
        publishDir = [
            path: { "${params.outdir}/bgc/gecco/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            "--cds ${params.bgc_gecco_cds}",
            "--threshold ${params.bgc_gecco_threshold}",
            "--p-filter ${params.bgc_gecco_pfilter}",
            "--edge-distance ${params.bgc_gecco_edgedistance}",
            params.bgc_gecco_mask ? '--mask' : '',
        ].join(' ').trim()
    }

    withName: HAMRONIZATION_ABRICATE {
        publishDir = [
            path: { "${params.outdir}/arg/hamronization/abricate" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.prefix = { "${report}.abricate" }
    }

    withName: HAMRONIZATION_AMRFINDERPLUS {
        publishDir = [
            path: { "${params.outdir}/arg/hamronization/amrfinderplus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.prefix = { "${report}.amrfinderplus" }
    }

    withName: HAMRONIZATION_DEEPARG {
        publishDir = [
            path: { "${params.outdir}/arg/hamronization/deeparg" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.prefix = { "${report}.deeparg" }
    }

    withName: HAMRONIZATION_RGI {
        publishDir = [
            path: { "${params.outdir}/arg/hamronization/rgi" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.prefix = { "${report}.rgi" }
    }

    withName: HAMRONIZATION_FARGENE {
        publishDir = [
            path: { "${params.outdir}/arg/hamronization/fargene" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.prefix = { "${meta.id}_${report}.fargene" }
    }

    withName: HAMRONIZATION_SUMMARIZE {
        publishDir = [
            path: { "${params.outdir}/reports/hamronization_summarize" },
            mode: params.publish_dir_mode,
            saveAs: { params.run_taxa_classification == false ? it : null },
        ]
    }

    withName: MERGE_TAXONOMY_HAMRONIZATION {
        publishDir = [
            path: { "${params.outdir}/reports/hamronization_summarize" },
            mode: params.publish_dir_mode,
            saveAs: { _ -> null },
        ]
    }

    withName: ARG_TABIX_BGZIP {
        ext.prefix = { "hamronization_complete_summary_taxonomy" }
        publishDir = [
            path: { "${params.outdir}/reports/hamronization_summarize" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: AMPCOMBI2_PARSETABLES {
        publishDir = [
            path: { "${params.outdir}/reports/ampcombi2/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = [
            "--aminoacid_length ${params.amp_ampcombi_parsetables_aalength}",
            "--db_evalue ${params.amp_ampcombi_parsetables_dbevalue}",
            "--amp_cutoff ${params.amp_ampcombi_parsetables_cutoff}",
            "--ampir_file ${params.amp_ampcombi_parsetables_ampir}",
            "--amplify_file ${params.amp_ampcombi_parsetables_amplify}",
            "--macrel_file ${params.amp_ampcombi_parsetables_macrel}",
            "--hmmsearch_file ${params.amp_ampcombi_parsetables_hmmsearch}",
            "--ampgram_file '.tsv' --amptransformer_file '.txt' --neubi_file '.fasta' --log TRUE",
            "--hmm_evalue ${params.amp_ampcombi_parsetables_hmmevalue}",
            "--window_size_stop_codon ${params.amp_ampcombi_parsetables_windowstopcodon}",
            "--window_size_transporter ${params.amp_ampcombi_parsetables_windowtransport}",
            params.amp_ampcombi_parsetables_removehitswostopcodons ? '--remove_stop_codons' : '',
        ].join(' ').trim()
        ext.prefix = { "${meta.id}" }
    }
    withName: AMPCOMBI2_COMPLETE {
        publishDir = [
            path: { "${params.outdir}/reports/ampcombi2" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.equals('versions.yml')) {
                    return filename
                }
                else {
                    return !params.run_taxa_classification ? filename : null
                }
            },
        ]
        ext.args   = "--log TRUE"
    }

    withName: AMPCOMBI2_CLUSTER {
        publishDir = [
            path: { "${params.outdir}/reports/ampcombi2" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.equals('versions.yml')) {
                    return filename
                }
                else {
                    return !params.run_taxa_classification ? filename : null
                }
            },
        ]
        ext.args   = [
            "--cluster_cov_mode ${params.amp_ampcombi_cluster_covmode}",
            "--cluster_mode ${params.amp_ampcombi_cluster_mode}",
            "--cluster_coverage ${params.amp_ampcombi_cluster_coverage}",
            "--cluster_seq_id ${params.amp_ampcombi_cluster_seqid}",
            "--cluster_sensitivity ${params.amp_ampcombi_cluster_sensitivity}",
            "--cluster_min_member ${params.amp_ampcombi_cluster_minmembers}",
            "--log TRUE",
            params.amp_ampcombi_cluster_removesingletons ? '--cluster_remove_singletons' : '',
        ].join(' ').trim()
    }

    withName: MERGE_TAXONOMY_AMPCOMBI {
        publishDir = [
            path: { "${params.outdir}/reports/ampcombi2" },
            mode: params.publish_dir_mode,
            saveAs: { _ -> null },
        ]
    }

    withName: AMP_TABIX_BGZIP {
        publishDir = [
            path: { "${params.outdir}/reports/ampcombi2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: COMBGC {
        publishDir = [
            path: { "${params.outdir}/reports/combgc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: ARGNORM_ABRICATE {
        publishDir = [
            path: { "${params.outdir}/arg/argnorm/abricate/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.prefix = { "${meta.id}.normalized.tsv" }
        ext.args   = "--hamronized"
    }

    withName: ARGNORM_AMRFINDERPLUS {
        publishDir = [
            path: { "${params.outdir}/arg/argnorm/amrfinderplus/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.prefix = { "${meta.id}.normalized.tsv" }
        ext.args   = "--hamronized"
    }

    withName: ARGNORM_DEEPARG {
        publishDir = [
            path: { "${params.outdir}/arg/argnorm/deeparg/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.prefix = { input_tsv.toString().endsWith(".potential.ARG.deeparg.tsv") ? "${meta.id}.potential.ARG.normalized.tsv" : "${meta.id}.ARG.normalized.tsv" }
        ext.args   = "--hamronized"
    }

    withName: MERGE_TAXONOMY_COMBGC {
        publishDir = [
            path: { "${params.outdir}/reports/combgc" },
            mode: params.publish_dir_mode,
            saveAs: { _ -> null },
        ]
    }

    withName: BGC_TABIX_BGZIP {
        publishDir = [
            path: { "${params.outdir}/reports/combgc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: AMP_DATABASE_DOWNLOAD {
        publishDir = [
            path: { "${params.outdir}/databases/ampcombi/" },
            mode: params.publish_dir_mode,
            enabled: params.save_db,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}
